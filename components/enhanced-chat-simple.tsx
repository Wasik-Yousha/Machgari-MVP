"use client"

import { useState, useRef, useEffect } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"
import { useUser } from "@/contexts/user-context"
import { useFarmingProfile } from "@/contexts/farming-profile-context"
import { Send, Bot, User, Sparkles, X } from "lucide-react"

interface ChatMessage {
  id: string
  type: 'user' | 'bot' | 'system'
  content: string
  timestamp: Date
  isSuper?: boolean
}

export function EnhancedChatSimple({ onClose }: { onClose: () => void }) {
  const { userRole } = useUser()
  const { farmingProfile, getFarmingRecommendations, getFarmingAnalysis } = useFarmingProfile()
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: '1',
      type: 'system',
      content: userRole === '‡¶ú‡ßá‡¶≤‡ßá' && farmingProfile 
        ? '‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§'
        : '‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§',
      timestamp: new Date()
    }
  ])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const scrollAreaRef = useRef<HTMLDivElement>(null)

  const isJeleWithProfile = userRole === '‡¶ú‡ßá‡¶≤‡ßá' && farmingProfile
  const canUseSuperChat = isJeleWithProfile

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  // Super chat analysis and recommendations
  const generateSuperChatResponse = (userInput: string): string => {
    const analysis = getFarmingAnalysis()
    const recommendations = getFarmingRecommendations()
    const lowerInput = userInput.toLowerCase()

    if (!analysis || !farmingProfile) {
      return "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶õ ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶Ø‡¶º‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞, ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø, ‡¶™‡ßã‡¶®‡¶æ, ‡¶∏‡¶æ‡¶∞ ‡¶ì ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
    }

    // Specific queries based on user input
    if (lowerInput.includes('‡¶ñ‡¶∞‡¶ö') || lowerInput.includes('‡¶¨‡¶æ‡¶ú‡ßá‡¶ü') || lowerInput.includes('‡¶¶‡¶æ‡¶Æ')) {
      return `üí∞ **‡¶ñ‡¶∞‡¶ö ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:**\n\n` +
             `‚Ä¢ ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶ñ‡¶∞‡¶ö: ${analysis.totalMonthlyFoodCost.toFixed(0)} ‡ß≥\n` +
             `‚Ä¢ ‡¶∏‡¶æ‡¶∞ ‡¶ñ‡¶∞‡¶ö: ${analysis.totalMonthlyFertilizerCost.toFixed(0)} ‡ß≥\n` +
             `‚Ä¢ ‡¶è‡¶ï‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶ñ‡¶∞‡¶ö: ${analysis.foodCostPerDecimal.toFixed(0)} ‡ß≥\n\n` +
             `üí° **‡¶ñ‡¶∞‡¶ö ‡¶ï‡¶Æ‡¶æ‡¶®‡ßã‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º:**\n` +
             `${recommendations.filter(r => r.includes('‡¶ñ‡¶∞‡¶ö')).join('\n')}\n\n` +
             `üìä **‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂:** ‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡ß≠‡ß¶% ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡ß©‡ß¶% ‡¶Ö‡¶®‡ßÅ‡¶™‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`
    }

    if (lowerInput.includes('‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶®') || lowerInput.includes('‡¶´‡¶≤‡¶®') || lowerInput.includes('‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø')) {
      return `üêü **‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:**\n\n` +
             `‚Ä¢ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶®: ${farmingProfile.targetProduction} ‡¶ï‡ßá‡¶ú‡¶ø/‡¶Æ‡¶æ‡¶∏\n` +
             `‚Ä¢ ‡¶è‡¶ï‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø: ${analysis.targetProductionPerDecimal.toFixed(0)} ‡¶ï‡ßá‡¶ú‡¶ø\n` +
             `‚Ä¢ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶Æ‡ßã‡¶ü ‡¶Ü‡¶Ø‡¶º‡¶§‡¶®: ${analysis.totalPondSize.toFixed(2)} ‡¶è‡¶ï‡¶∞\n\n` +
             `üöÄ **‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶® ‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶®‡ßã‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º:**\n` +
             `‚Ä¢ ‡¶™‡¶æ‡¶®‡¶ø‡¶§‡ßá ‡¶Ö‡¶ï‡ßç‡¶∏‡¶ø‡¶ú‡ßá‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶†‡¶ø‡¶ï ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®\n` +
             `‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ pH ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® (‡ß¨.‡ß´-‡ßÆ.‡ß´)\n` +
             `‚Ä¢ ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶ò‡¶®‡¶§‡ßç‡¶¨ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶® (‡ßß‡ß¶‡ß¶‡ß¶-‡ßß‡ß´‡ß¶‡ß¶ ‡¶ü‡¶ø/‡¶è‡¶ï‡¶∞)\n` +
             `‚Ä¢ ‡¶™‡ßç‡¶∞‡ßã‡¶¨‡¶æ‡¶Ø‡¶º‡ßã‡¶ü‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®`
    }

    // General comprehensive response
    return `üåü **‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶õ ‡¶ö‡¶æ‡¶∑ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£:**\n\n` +
           `üìä **‡¶∏‡¶æ‡¶Æ‡¶ó‡ßç‡¶∞‡¶ø‡¶ï ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ:**\n` +
           `‚Ä¢ ‡¶Æ‡ßã‡¶ü ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞: ${farmingProfile.totalPonds} ‡¶ü‡¶ø (${analysis.totalPondSize.toFixed(2)} ‡¶è‡¶ï‡¶∞)\n` +
           `‚Ä¢ ‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û‡¶§‡¶æ: ${farmingProfile.experience} ‡¶¨‡¶õ‡¶∞\n` +
           `‚Ä¢ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶â‡ßé‡¶™‡¶æ‡¶¶‡¶®: ${farmingProfile.targetProduction} ‡¶ï‡ßá‡¶ú‡¶ø/‡¶Æ‡¶æ‡¶∏\n\n` +
           `üí° **‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡¶∏‡¶Æ‡ßÇ‡¶π:**\n` +
           `${recommendations.slice(0, 3).map(r => '‚Ä¢ ' + r).join('\n')}\n\n` +
           `üéØ **‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶™‡¶¶‡¶ï‡ßç‡¶∑‡ßá‡¶™:**\n` +
           `‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ ‡¶ó‡ßÅ‡¶£‡¶ó‡¶§ ‡¶Æ‡¶æ‡¶® ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
           `‚Ä¢ ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®\n` +
           `‚Ä¢ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®`
  }

  // General chat responses for non-Jeles or those without profile
  const generateGeneralResponse = (userInput: string): string => {
    const lowerInput = userInput.toLowerCase()

    if (lowerInput.includes('‡¶¶‡¶æ‡¶Æ') || lowerInput.includes('‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞')) {
      return "üêü ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡¶æ‡¶õ‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶¶‡¶∞:\n‚Ä¢ ‡¶∞‡ßÅ‡¶á: ‡ß®‡ßÆ‡ß¶-‡ß©‡ß®‡ß¶ ‡ß≥/‡¶ï‡ßá‡¶ú‡¶ø\n‚Ä¢ ‡¶ï‡¶æ‡¶§‡¶≤‡¶æ: ‡ß©‡ß¶‡ß¶-‡ß©‡ß´‡ß¶ ‡ß≥/‡¶ï‡ßá‡¶ú‡¶ø\n‚Ä¢ ‡¶Æ‡ßÉ‡¶ó‡ßá‡¶≤: ‡ß®‡ß´‡ß¶-‡ß®‡ßÆ‡ß¶ ‡ß≥/‡¶ï‡ßá‡¶ú‡¶ø\n‚Ä¢ ‡¶á‡¶≤‡¶ø‡¶∂: ‡ßß‡ß®‡ß¶‡ß¶-‡ßß‡ßÆ‡ß¶‡ß¶ ‡ß≥/‡¶ï‡ßá‡¶ú‡¶ø\n\n‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¶‡¶æ‡¶Æ ‡¶Ö‡¶û‡ßç‡¶ö‡¶≤ ‡¶ì ‡¶Æ‡ßå‡¶∏‡ßÅ‡¶Æ ‡¶≠‡ßá‡¶¶‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡•§"
    }

    if (lowerInput.includes('‡¶ö‡¶æ‡¶∑') || lowerInput.includes('‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞')) {
      return "üèûÔ∏è ‡¶Æ‡¶æ‡¶õ ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø:\n‚Ä¢ ‡¶™‡ßÅ‡¶ï‡ßÅ‡¶∞‡ßá‡¶∞ ‡¶ó‡¶≠‡ßÄ‡¶∞‡¶§‡¶æ ‡ß¨-‡ßÆ ‡¶´‡ßÅ‡¶ü ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®\n‚Ä¢ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶è‡¶ï‡¶∞‡ßá ‡ßß‡ß¶‡ß¶‡ß¶-‡ßß‡ß´‡ß¶‡ß¶ ‡¶™‡ßã‡¶®‡¶æ ‡¶¶‡¶ø‡¶®\n‚Ä¢ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶ø‡¶§ ‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø ‡¶¶‡¶ø‡¶® (‡¶¶‡ßà‡¶π‡¶ø‡¶ï ‡¶ì‡¶ú‡¶®‡ßá‡¶∞ ‡ß©-‡ß´%)\n‚Ä¢ ‡¶™‡¶æ‡¶®‡¶ø‡¶∞ pH ‡ß¨.‡ß´-‡ßÆ.‡ß´ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®\n‚Ä¢ ‡¶Ö‡¶ï‡ßç‡¶∏‡¶ø‡¶ú‡ßá‡¶®‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡ß´ ppm ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®"
    }

    return "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡¶æ‡¶õ ‡¶ö‡¶æ‡¶∑, ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶¶‡¶∞, ‡¶™‡¶∞‡¶ø‡¶¨‡¶π‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶∞‡¶ì ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø '‡¶ú‡ßá‡¶≤‡ßá' ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶∑‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    }

    // Remove system messages when user starts chatting
    setMessages(prev => {
      // Filter out system messages and keep only user/bot messages
      const filteredMessages = prev.filter(msg => msg.type !== 'system')
      return [...filteredMessages, userMessage]
    })
    
    setInputMessage('')
    setIsLoading(true)

    // Simulate processing time
    setTimeout(() => {
      const botResponse: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: canUseSuperChat 
          ? generateSuperChatResponse(inputMessage)
          : generateGeneralResponse(inputMessage),
        timestamp: new Date(),
        isSuper: !!canUseSuperChat
      }

      setMessages(prev => [...prev, botResponse])
      setIsLoading(false)
    }, 1000)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className="h-full flex flex-col">
      <Card className="flex-1 flex flex-col h-full border-0 shadow-none">
        <div className="sticky top-0 z-10 flex items-center justify-between p-3 border-b bg-white dark:bg-gray-900">
          <div className="flex items-center gap-2">
            {canUseSuperChat ? (
              <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 via-blue-500 to-green-500 flex items-center justify-center">
                <Sparkles className="h-4 w-4 text-white" />
              </div>
            ) : (
              <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center">
                <Bot className="h-4 w-4 text-white" />
              </div>
            )}
            <span className="font-bold text-lg">
              {canUseSuperChat ? '‡¶Æ‡¶æ‡¶õ‡¶ó‡¶æ‡¶°‡¶º‡¶ø AI' : '‡¶Æ‡¶æ‡¶õ‡¶ó‡¶æ‡¶°‡¶º‡¶ø AI'}
            </span>
            {canUseSuperChat && (
              <Badge className="bg-gradient-to-r from-purple-500 to-blue-500 text-white border-0">
                <Sparkles className="h-3 w-3 mr-1" />
                ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞
              </Badge>
            )}
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={onClose}
            className="h-8 w-8 rounded-full"
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        <CardContent className="flex-1 flex flex-col p-0 overflow-hidden">
          <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
            <div className="space-y-4">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex items-start gap-3 ${
                    message.type === 'user' ? 'flex-row-reverse' : ''
                  }`}
                >
                  <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center shadow-sm ${
                    message.type === 'user' 
                      ? 'bg-gradient-to-br from-blue-500 to-blue-600' 
                      : message.type === 'system'
                      ? 'bg-gradient-to-br from-gray-400 to-gray-500'
                      : message.isSuper
                      ? 'bg-gradient-to-br from-purple-500 via-blue-500 to-green-500'
                      : 'bg-gradient-to-br from-green-500 to-green-600'
                  }`}>
                    {message.type === 'user' ? (
                      <User className="h-5 w-5 text-white" />
                    ) : message.isSuper ? (
                      <Sparkles className="h-5 w-5 text-white" />
                    ) : (
                      <Bot className="h-5 w-5 text-white" />
                    )}
                  </div>
                  
                  <div className={`flex-1 max-w-[85%] ${
                    message.type === 'user' ? 'text-right' : ''
                  }`}>
                    <div className={`rounded-2xl p-4 shadow-sm ${
                      message.type === 'user'
                        ? 'bg-gradient-to-br from-blue-500 to-blue-600 text-white ml-auto'
                        : message.type === 'system'
                        ? 'bg-gradient-to-br from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-900 text-gray-700 dark:text-gray-300 border'
                        : message.isSuper
                        ? 'bg-gradient-to-br from-purple-50 via-blue-50 to-green-50 dark:from-purple-950 dark:via-blue-950 dark:to-green-950 border-2 border-purple-200 dark:border-purple-700'
                        : 'bg-gradient-to-br from-gray-50 to-white dark:from-gray-900 dark:to-gray-800 border'
                    }`}>
                      <div className="whitespace-pre-wrap text-sm leading-relaxed">
                        {message.content}
                      </div>
                    </div>
                    <div className={`text-xs text-gray-500 mt-2 ${message.type === 'user' ? 'text-right' : ''}`}>
                      {message.timestamp.toLocaleTimeString('bn-BD', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </div>
                  </div>
                </div>
              ))}
              
              {isLoading && (
                <div className="flex items-start gap-3">
                  <div className="flex-shrink-0 w-10 h-10 rounded-full bg-gradient-to-br from-green-500 to-green-600 flex items-center justify-center shadow-sm">
                    <Bot className="h-5 w-5 text-white animate-pulse" />
                  </div>
                  <div className="bg-gradient-to-br from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-900 rounded-2xl p-4 border">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </ScrollArea>
          
          <div className="sticky bottom-0 p-3 border-t bg-white dark:bg-gray-900">
            <div className="flex gap-2">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®..."
                disabled={isLoading}
                className="flex-1 rounded-xl"
              />
              <Button 
                onClick={handleSendMessage} 
                disabled={isLoading || !inputMessage.trim()}
                className={`rounded-xl px-4 ${
                  canUseSuperChat 
                    ? 'bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600' 
                    : 'bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700'
                }`}
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
